<?php

class IndexController extends BaseController {

    /**
     * The mother of all indexes
     * @param $hash
     * @return $this
     */
	public function index($hash) {
        $vars = $this->getVars();
        $optional = ['optional' => ['hash' => $hash]];
        // Check if current user is part of the workspace he's trying to view
        $user_in_workspace = DB::table('user2group')->
            select('user_id')->
            join('groups', 'groups.id', '=', 'user2group.group_id')->
            where('user_id', '=', Session::get('user_id'))->
            where('groups.hash', '=', $hash)->
            get();
        if (empty($user_in_workspace)) {
            exit('Not allowed to view workspace');
        }
        return View::make('_layout', $vars + $optional)->nest('child', 'workspace', $vars);
	}

    /**
     * Get concatenated assets' filenames (e.g. styles-5jfs34.css) generated by gulpJS
     * @return array
     */
    private function getAssetNames() {
        $filenames = [];
        foreach (glob('build/manifest-*.json') as $file) {
            $file_handle = fopen($file, 'r');
            $file = (array)json_decode(fread($file_handle, filesize($file)));
            $filenames[array_keys($file)[0]] = array_values($file)[0];
            fclose($file_handle);
        }
        return $filenames;
    }

    /**
     * Get common data for all views
     * @param null $user_id
     * @return array
     */
    private function getVars($user_id = null) {
        $user_id = $user_id ? $user_id : Session::get('user_id');
        $CurrUser = User::find(Session::get('user_id'));
        //
        $my_groups = array();
        $all_groups  = DB::table('groups')
            ->select('groups.id', 'groups.hash', 'groups.name', 'user2group.user_id AS is_followed')
            ->leftJoin('user2group', 'user2group.group_id', '=', DB::raw('groups.id AND user2group.user_id = ' . $user_id))
            ->get();
        $colors = get_colors();
        foreach($all_groups as $group) {
            $second_letter = substr($group->name, 1, 1);
            $color = $colors[strtoupper($second_letter)];
            $group->color = $color;
            if ($group->is_followed) {
                $my_groups[] = $group;
            }
        }
        return array(
            'CurrUser' => $CurrUser,
            'my_groups' => $my_groups,
            'asset_names' => $this->getAssetNames()
        );
    }

    /**
     * Add a subscriber's email to the promo table
     */
    public function subscribe() {
        $email = Input::get('email');
        $id = DB::table('promo')->insertGetId(
            array('email' => $email)
        );
        echo $id;
    }

    /**
     * Choose workspaces screen for users that have none associated
     */
    public function chooseWorkspaces() {
        if (!Session::has('choose_workspace')) {
            return Redirect::to('/');
        }
        // Workspaces chosen - attach to user
        if (Input::has('workspace_batch')) {
            $workspace_batch = [
                'idc_statistics' => [10],
                'idc_mba' => [13],
                'comas_comp' => [14, 15, 16],
                'ono_phys' => [],
            ];
            $user_id = Session::get('user_id');
            foreach ($workspace_batch[Input::get('workspace_batch')] as $workspace_id) {
                DB::table('user2group')->insert(array('user_id' => $user_id, 'group_id' => $workspace_id));
            }
            Session::remove('choose_workspace');
            return Redirect::to('/');
        }
        return View::make('choose-workspaces');
    }

    /**
     * Originally used by Android app to log errors.
     * This function sends out an email containing the error info.
     */
    public function mobileErrorLogger() {
        if (!isset($_POST['app_name']) || !isset($_POST['version']) || !isset($_POST['message'])) {
            exit('nigga wat');
        }
        $app_name = $_POST['app_name'];
        $version = $_POST['version'];
        $message = nl2br($_POST['message']);
        $ret = Mail::send('emails.mobile_error', array(
            'app_name' => $app_name,
            'version' => $version,
            'errmessage' => $message
        ), function($message)
        {
            $message->to('benor1470@gmail.com', 'errors@afterclass.co.il')->subject('AfterClass Mobile Error!');
        });
        var_dump($ret);
    }

}